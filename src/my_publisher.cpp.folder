#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include <string>

int main(int argc, char** argv)
{
  ros::init(argc, argv, "image_publisher");
  ros::NodeHandle nh;
  image_transport::ImageTransport it(nh);
  image_transport::Publisher pub = it.advertise("camera/image", 1);



  // Convert the passed as command line parameter index for the video device to an integer
  std::istringstream video_source(argv[1]);

  cv::VideoCapture cap("/home/fujenchu/projects/robotArm/catkin_ws/data/pic_%4d_d.png");
  // Check if video device can be opened with the given index
  if(!cap.isOpened()) return 1;
  cv::Mat frame;
  sensor_msgs::ImagePtr msg;


  ros::Rate loop_rate(50);
  while (nh.ok()) {
     cap >> frame;
     // Check if grabbed frame is actually full with some content
     if(!frame.empty()) {
       //msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", frame).toImageMsg();//color
       msg = cv_bridge::CvImage(std_msgs::Header(), "mono8", frame).toImageMsg();//depth
       pub.publish(msg);
       cv::waitKey(1);
     }

     ros::spinOnce();
     loop_rate.sleep();

  }
}

